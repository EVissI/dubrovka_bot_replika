from aiogram import BaseMiddleware
from aiogram.types import Message
from loguru import logger
from typing import Callable, Awaitable, Dict, Any
from app.db.models import User
from app.db.dao import UserDAO
from aiogram.filters import CommandStart
from app.db.database import async_session_maker
from app.db.schemas import TelegramIDModel


class VerificationMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ó–∞–ø—Ä–µ—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã /start
    """
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any],
    ) -> Any:
        user_id = event.from_user.id

        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã 
        allowed_commands = ["/start"]

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if event.text in allowed_commands:
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(user_id)
        async with async_session_maker() as session:
            user = await UserDAO.find_one_or_none(session,TelegramIDModel(telegram_id=int(user_id)))
        logger.info(user)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º
        if not user:
            await event.answer("üö´ –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.")
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º
        if user.verification_status == User.VerifocationStatus.non_verifed:
            await event.answer("üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        if user.verification_status == User.VerifocationStatus.banned:
            async with async_session_maker() as session:
                admins:list[User] = await UserDAO.get_admins(session)
            for admin in admins:
                admin_link_msg = f"@{admin.username}\n" if admin.username else f'<a href="tg://user?id={admin.telegram_id}">–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è</a>\n'
            await event.answer(f"üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ –æ–±–∂–∞–ª–æ–±–∏—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏: {admin_link_msg}")
            return

        # –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
        return await handler(event, data)